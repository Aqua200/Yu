import fetch from 'node-fetch';
import axios from 'axios';

/*‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê„Äé APIS „Äè‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê*/
const apis = {
    delirius: 'https://delirius-apiofc.vercel.app/',
    ryzen: 'https://apidl.asepharyana.cloud/',
    rioo: 'https://restapi.apibotwa.biz.id/'
};
/*‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê*/

const handler = async (m, { conn, text, args, usedPrefix, command }) => {
    try {
        // ‚ú¶ Reacci√≥n r√°pida ‚ú¶
        await conn.sendMessage(m.chat, { react: { text: "üéµ", key: m.key } });

        // ‚ú¶ Validar entrada ‚ú¶
        if (!text) {
            return conn.sendMessage(m.chat, {
                text: `‚úß Por favor escribe lo que deseas buscar en Spotify.\n\n‚û• Ejemplo:\n‚û• *${usedPrefix + command}* Alan Walker - Faded`
            }, { quoted: m });
        }

        // ‚ú¶ B√∫squeda en Spotify ‚ú¶
        const res = await axios.get(`${apis.delirius}search/spotify?q=${encodeURIComponent(text)}&limit=1`);
        
        if (!res.data.data || res.data.data.length === 0) {
            throw '‚úñ No se encontraron resultados en Spotify.';
        }

        const result = res.data.data[0];
        const img = result.image;
        const url = result.url;
        
        // ‚ú¶ Informaci√≥n estilizada ‚ú¶
        const info = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê„Äé ùôàùôêùôéùôÑùòæùòº „Äè‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚îÉ ‚ú¶ ùóßùó∂ùòÅùòÇùóπùóº: ${result.title}
‚îÉ ‚ú¶ ùóîùóøùòÅùó∂ùòÄùòÅùóÆ: ${result.artist}
‚îÉ ‚ú¶ ùóóùòÇùóøùóÆùó∞ùó∂ùóºùóª: ${result.duration}
‚îÉ ‚ú¶ ùó£ùòÇùóØùóπùó∂ùó∞ùóÆùó±ùóº: ${result.publish}
‚îÉ ‚ú¶ ùó£ùóºùóΩùòÇùóπùóÆùóøùó∂ùó±ùóÆùó±: ${result.popularity}
‚îÉ ‚ú¶ ùóòùóªùóπùóÆùó∞ùó≤: ${url}
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚åõ *Preparando tu m√∫sica...*`.trim();

        await conn.sendMessage(m.chat, {
            image: { url: img },
            caption: info
        }, { quoted: m });

        // ‚ú¶ Funci√≥n de env√≠o de audio ‚ú¶
        const sendAudio = async (link) => {
            const audioRes = await fetch(link);
            const audioBuffer = await audioRes.arrayBuffer();
            
            await conn.sendMessage(m.chat, {
                audio: Buffer.from(audioBuffer),
                fileName: `${result.title}.mp3`,
                mimetype: 'audio/mpeg'
            }, { quoted: m });
        };

        // ‚ú¶ Intentar descarga en m√∫ltiples servidores ‚ú¶
        const endpoints = [
            `${apis.delirius}download/spotifydl?url=${encodeURIComponent(url)}`,
            `${apis.delirius}download/spotifydlv3?url=${encodeURIComponent(url)}`,
            `${apis.rioo}api/spotify?url=${encodeURIComponent(url)}`,
            `${apis.ryzen}api/downloader/spotify?url=${encodeURIComponent(url)}`
        ];

        let success = false;
        for (const endpoint of endpoints) {
            try {
                const dlRes = await fetch(endpoint);
                const json = await dlRes.json();
                
                if (json.data?.url) {
                    await sendAudio(json.data.url);
                    success = true;
                    break;
                } else if (json.data?.response) {
                    await sendAudio(json.data.response);
                    success = true;
                    break;
                } else if (json.link) {
                    await sendAudio(json.link);
                    success = true;
                    break;
                }
            } catch (e) {
                console.error(`‚ö†Ô∏è Error en el servidor ${endpoint}:`, e);
                continue;
            }
        }

        if (!success) {
            throw '‚úñ No fue posible descargar el audio en este momento.';
        }

    } catch (error) {
        console.error(error);
        conn.sendMessage(m.chat, { text: `‚ö†Ô∏è Error: ${error}` }, { quoted: m });
    }
};
handler.help = ['play5'];
handler.command = ['play5'];
handler.tags = ['m√∫sica'];
handler.register = true;

export default handler;
